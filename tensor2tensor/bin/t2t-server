#!/usr/bin/env python
# coding=utf-8
# Copyright 2017 The Tensor2Tensor Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

r"""A simple web service that decodes from trained T2T models.

This binary performs inference using the Estimator API.

Example usage to start a server on port 5000:

  t2t-server \
      --data_dir=~/t2t_data \
      --output_dir=~/t2t_train/parsing_icelandic16k/transformer-transformer_parsing_ice \
      --problems=parsing_icelandic16k \
      --model=transformer \
      --hparams_set=transformer_parsing_ice

"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import six

# Dependency imports

from tensor2tensor.utils import decoding
from tensor2tensor.utils import trainer_utils
from tensor2tensor.utils import usr_dir

import tensorflow as tf

flags = tf.flags
FLAGS = flags.FLAGS

flags.DEFINE_string("output_dir", "", "Training directory to load from.")
flags.DEFINE_integer("decode_shards", 1, "Number of decoding replicas.")
flags.DEFINE_string("t2t_usr_dir", "",
                    "Path to a Python module that will be imported. The "
                    "__init__.py file should include the necessary imports. "
                    "The imported files should contain registrations, "
                    "e.g. @registry.register_model calls, that will then be "
                    "available to the t2t-decoder.")
flags.DEFINE_string("master", "", "Address of TensorFlow master.")
flags.DEFINE_string("schedule", "train_and_evaluate",
                    "Must be train_and_evaluate for decoding.")


def main(_):
  tf.logging.set_verbosity(tf.logging.INFO)
  usr_dir.import_usr_dir(FLAGS.t2t_usr_dir)
  trainer_utils.log_registry()
  trainer_utils.validate_flags()
  assert FLAGS.schedule == "train_and_evaluate"
  data_dir = os.path.expanduser(FLAGS.data_dir)
  output_dir = os.path.expanduser(FLAGS.output_dir)

  hparams = trainer_utils.create_hparams(
      FLAGS.hparams_set, data_dir, passed_hparams=FLAGS.hparams)
  trainer_utils.add_problem_hparams(hparams, FLAGS.problems)
  estimator, _ = trainer_utils.create_experiment_components(
      data_dir=data_dir,
      model_name=FLAGS.model,
      hparams=hparams,
      run_config=trainer_utils.create_run_config(output_dir))

  decode_hp = decoding.decode_hparams(FLAGS.decode_hparams)
  decode_hp.add_hparam("shards", FLAGS.decode_shards)
  decode_hp.add_hparam("shard_id", FLAGS.worker_id)

  def input_generator(cnt = 1):
    TEXT = [
      "Margir voru ósáttir við að Katrín Jakobsdóttir myndaði ríkisstjórn með Sjálfstæðisflokknum .",
      "Tilraunir til stjórnarmyndunar gengu vel en þó varð vart við óþolinmæði í Framsóknarflokknum .",
      "Ísbíllinn ekur á flesta þéttbýlisstaði landsins á sumrin og marga staði þar sem fólk er í fríi ."
    ]
    i = 0
    while (cnt == 0) or (i < cnt):
      for txt in TEXT:
        yield txt
        i += 1
        if cnt and i >= cnt:
          break

  #_ = """
  output_generator = decoding.decode_from_text_generator(
      estimator, decode_hp, input_generator(100))
  print("\n*** OUTPUT ***\n")
  for output in output_generator:
    print(output)
  print("\n*** END OF OUTPUT ***\n")

  def decode_text(txt):
    def input_generator():
      yield txt
    output_generator = decoding.decode_from_text_generator(
        estimator, decode_hp, input_generator())
    return six.next(output_generator)

  print(decode_text("Viðræður milli flokkanna héldu áfram í dag án þess að árangur næðist ."))
  #"""

  #decoder = decoding.TextDecoder(estimator, decode_hp)
  #for txt in input_generator():
  #  print(decoder.decode(txt))

if __name__ == "__main__":
  tf.app.run()
